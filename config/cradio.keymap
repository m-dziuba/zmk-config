/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define SYM 1
#define EXT 2
#define NUM 3
#define FUNC 4
#define SET 5
#define GAM 6
#define GAM_SYM 7



/ {
    combos {
        compatible = "zmk,combos";

        l_tog_settings_layer {
            timeout-ms = <300>;
            key-positions = <30 31>;
            bindings = <&mo 5>;
        };

        tog_gaming_layer {
            bindings = <&tog 6>;
            key-positions = <30 31 32 33>;
        };

        r_tog_settings_layer {
            bindings = <&mo 5>;
            key-positions = <32 33>;
            timeout-ms = <300>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 6>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <8 7>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        repeat {
            bindings = <&key_repeat>;
            key-positions = <12 13>;
        };
    };

    behaviors {
        num_word {
            layer = <NUM>;
        };

        hm_r: hm_r {
            label = "Home row mode right";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <32 33 30 31 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 33>;
            hold-trigger-on-release;
        };

        hm_l: hm_l {
            label = "Home row mode left";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <30 31 32 33 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33>;
            hold-trigger-on-release;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
        
        smart_num {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bidings = <&mo>, <&num_dance>;
        };

        num_dance {
            compatible = "zmk,behavior-tap-dance";
            tapping-term-ms = <200>;
            bindings = <&num_word>, <&sl NUM>;
        };

        
        lt_spc {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bidings = <&mo>, <&spc_morhp>;
        };
        
        spc_morhp: spc_morhp {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_MORPH";
            bindings = <&kp SPACE>, <&dot_spc>;
            mods = <(MOD_LSFT)>;
        };

        dot_spc: dot_spc {
            compatible = "zmk,macro";
            label = "DOT_SPACE";
            wait-ms = <0>;
            tap-ms = <5>;
            bindings = <&kp DOT &kp SPACE &sk LSHFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
&kp Q          &kp W         &kp F           &kp P          &kp B         &kp J        &kp L          &kp U          &kp Y         &kp SQT
&hm_l LMETA A  &hm_l LALT R  &hm_l LSHIFT S  &hm_l LCTRL T  &kp G         &kp M        &hm_r RCTRL N  &hm_r RSHFT E  &hm_r RALT I  &hm_r RMETA O
&kp Z          &kp X         &kp C           &kp D          &kp V         &kp K        &kp H          &kp COMMA      &kp DOT       &kp SLASH
                                             &sl 1          &smart_shift  &lt 4 SPACE  &sl 2
            >;
        };

        sym_layer {
            bindings = <
&none               &kp DOLLAR              &kp RIGHT_PARENTHESIS              &kp RIGHT_BRACE         &kp CARET      &kp TILDE    &kp RIGHT_BRACKET         &kp MINUS          &kp ASTERISK                &kp GRAVE
&hm_l LMETA ESCAPE  &hm_l LEFT_ALT KP_PLUS  &hm_l LEFT_SHIFT LEFT_PARENTHESIS  &hm_l LCTRL LEFT_BRACE  &kp SEMICOLON  &kp COLON    &hm_r RCTRL LEFT_BRACKET  &hm_r RSHFT EQUAL  &hm_r RIGHT_ALT UNDERSCORE  &hm_r RMETA ENTER
&none               &kp EXCLAMATION         &kp POUND                          &kp PIPE                &kp AT_SIGN    &key_repeat  &kp AMPERSAND             &kp PERCENT        &kp BACKSLASH               &none
                                                                               &mo 4                   &trans         &trans       &trans
            >;
        };

        ext_layer {
            bindings = <
&kp LC(Z)  &kp LC(X)  &kp LC(C)   &kp LC(V)  &kp LC(Y)    &kp RC(Y)     &kp RC(V)  &kp RC(C)      &kp RC(X)    &kp RC(Z)
&sk LMETA  &sk LALT   &sk LSHIFT  &sk LCTRL  &caps_word   &kp CAPSLOCK  &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT
&none      &none      &none       &none      &key_repeat  &key_repeat   &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                                  &trans     &kp DELETE   &kp TAB       &smart_num NUM 0
            >;
        };

        num_layer {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans
            >;
        };

        func_layer {
            bindings = <
&kp F1    &kp F2    &kp F3      &kp F4     &kp F5   &kp F6   &kp F7     &kp F8     &kp F9    &kp F10
&kp LGUI  &sk LALT  &sk LSHIFT  &sk LCTRL  &kp F11  &kp F12  &sk RCTRL  &sk RSHFT  &sk RALT  &kp RMETA
&trans    &trans    &trans      &trans     &trans   &trans   &trans     &trans     &trans    &trans
                                &trans     &trans   &trans   &trans
            >;
        };

        settings_layer {
            bindings = <
&none        &none              &kp C_VOLUME_UP  &kp C_MUTE        &kp C_VOLUME_DOWN  &kp C_VOL_DN    &kp C_MUTE        &kp C_VOLUME_UP  &none         &none
&none        &none              &kp C_NEXT       &kp C_PLAY_PAUSE  &kp C_PREV         &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT       &none         &none
&kp C_SLEEP  &kp K_SCREENSAVER  &none            &out OUT_TOG      &ext_power EP_TOG  &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_CLR
                                                 &trans            &trans             &trans          &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp TAB    &kp Q  &kp X  &kp E  &kp R      &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A  &kp W  &kp D  &kp F      &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z  &kp S  &kp X  &kp C      &trans  &trans  &trans  &trans  &trans
                         &mo 7  &kp SPACE  &trans  &trans
            >;
        };

        gaming_sym_layer {
            bindings = <
&kp N1        &kp N2  &kp N3  &kp N4  &kp N5  &trans  &trans  &trans  &trans  &trans
&kp CAPS      &trans  &trans  &trans  &kp G   &trans  &trans  &trans  &trans  &trans
&kp LEFT_ALT  &kp T   &trans  &kp V   &kp B   &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &trans  &tog 0
            >;
        };
    };
};
