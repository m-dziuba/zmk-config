#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


// &sk {
//     release-after-ms = <900>;
//     quick-release;
// };
//
// &sl {
//     ignore-modifiers;
// };
//
// &lt {
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <175>;
// };
//
// &caps_word {
//     /delete-property/ ignore-modifiers;
// };
//
// &num_word {
//     layers = <3>;
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
// };
//
// &mt { 
//     flavor = "tap-preferred";
//     tapping-term-ms = <220>;
//     quick-tap-ms = <220>;
//     hold-trigger-key-positions = <0>;
// };

/ { 
    combos { 
        compatible = "zmk,combos"; 
        combo_gam_layer { 
            timeout-ms = <18>; 
            bindings = <&tog 6>; 
            key-positions = <31 30 32 33>;
            layers = <0 1 2 3 4>;
            require-prior-idle-ms = <150>;
        };
    
        combo_esc {
            timeout-ms = <18>;
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0 1 2 3 6 7>;
            require-prior-idle-ms = <150>;
        };
    
        combo_ret {
            timeout-ms = <18>;
            bindings = <&kp RETURN>;
            key-positions = <2 3>;
            layers = <0 1 2 3 6 7>;
            require-prior-idle-ms = <150>;
        };
    
        combo_tab {
            timeout-ms = <18>;
            bindings = <&hml LA(LCTRL) TAB>;
            key-positions = <11 12>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    // 
    //     combo_repeat {
    //         timeout-ms = <18>;
    //         bindings = <&hml_repeat  LS(LCTRL) 0>;
    //         key-positions = <12 13>;
    //         layers = <0 1 2 3>;
    //         require-prior-idle-ms = <150>;
    //     };
    // 
        combo_l_set_layer {
            timeout-ms = <18>;
            bindings = <&mo 5>;
            key-positions = <31 30>;
            layers = <0 1 2 3 4 6 7>;
            require-prior-idle-ms = <150>;
        };
    
        combo_bspc {
            timeout-ms = <18>;
            bindings = <&kp BSPC>;
            key-positions = <6 7>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_del {
            timeout-ms = <18>;
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_r_set_layer {
            timeout-ms = <18>;
            bindings = <&mo 5>;
            key-positions = <32 33>;
            layers = <0 1 2 3 4 6 7>;
            require-prior-idle-ms = <150>;
        };
    
        combo_at {
            timeout-ms = <30>;
            bindings = <&kp AT>;
            key-positions = <1 11>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_hash {
            timeout-ms = <30>;
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_dllr {
            timeout-ms = <30>;
            bindings = <&kp DLLR>;
            key-positions = <3 13>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_prcnt {
            timeout-ms = <30>;
            bindings = <&kp PRCNT>;
            key-positions = <4 14>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_grave {
            timeout-ms = <30>;
            bindings = <&kp GRAVE>;
            key-positions = <11 21>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_bslh {
            timeout-ms = <30>;
            bindings = <&kp BSLH>;
            key-positions = <12 22>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_equal {
            timeout-ms = <30>;
            bindings = <&kp EQUAL>;
            key-positions = <13 23>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    
        combo_tilde {
            timeout-ms = <30>;
            bindings = <&kp TILDE>;
            key-positions = <14 24>;
            layers = <0 1 2 3>;
            require-prior-idle-ms = <150>;
        };
    };
    
    behaviors { 
        hml: hml { 
            label = "ZB_hml";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release; 
        };

        hmr: hmr {
            label = "ZB_hmr";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <4 3 2 1 0 14 13 12 11 10 24 23 22 21 20 30 31 32 33>;
            hold-trigger-on-release;
        };
        
        // hml_repeat: hml_repeat {
        //     label = "ZB_hml_repeat";
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <175>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&key_repeat>;
        //     hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        //     hold-trigger-on-release;
        // };
    //
    //     
    // //     masked_home: masked_home {
    //         label = "ZB_masked_home";
    //         compatible = "zmk,behavior-mod-morph";
    //         #binding-cells = <0>;
    //         bindings = <&kp HOME>, <&kp HOME>;
    //         mods = <(MOD_LCTL)>;
    //     };
    //
    //     masked_end: masked_end {
    //         label = "ZB_masked_end";
    //         compatible = "zmk,behavior-mod-morph";
    //         #binding-cells = <0>;
    //         bindings = <&kp END>, <&kp END>;
    //         mods = <(MOD_LCTL)>;
    //     };
    //     
    //     mt_home: mt_home {
    //         label = "ZB_mt_home";
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         bindings = <&masked_home>, <&kp>;
    //         flavor = "tap-preferred";
    //         tapping-term-ms = <220>;
    //         quick-tap-ms = <220>;
    //         hold-trigger-key-positions = <0>;
    //     };
    //     
    //     mt_end: mt_end {
    //         label = "ZB_mt_end";
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         bindings = <&masked_end>, <&kp>;
    //         flavor = "tap-preferred";
    //         tapping-term-ms = <220>;
    //         quick-tap-ms = <220>;
    //         hold-trigger-key-positions = <0>;
    //     };
    //     
    //     smart_shift: smart_shift {
    //         label = "ZB_smart_shift";
    //         compatible = "zmk,behavior-mod-morph";
    //         #binding-cells = <0>;
    //         bindings = <&sk LSHFT>, <&caps_word>;
    //         mods = <(MOD_LSFT)>;
    //     };
    //     
    //     smart_num: smart_num {
    //         label = "ZB_smart_num";
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         flavor = "balanced";
    //         tapping-term-ms = <200>;
    //         quick-tap-ms = <175>;
    //         bindings = <&mo>, <&num_dance>;
    //     };
    //
    //     num_dance: num_dance {
    //         label = "ZB_num_dance";
    //         compatible = "zmk,behavior-tap-dance";
    //         #binding-cells = <0>;
    //         tapping-term-ms = <200>;
    //         bindings = <&num_word>, <&sl 3>;
    //     };
    //
    //     lt_spc: lt_spc {
    //         label = "ZB_lt_spc";
    //         compatible = "zmk,behavior-hold-tap";
    //         #binding-cells = <2>;
    //         flavor = "balanced";
    //         tapping-term-ms = <200>;
    //         quick-tap-ms = <175>;
    //         bindings = <&mo>, <&spc_morph>;
    //     };
    //     
    //     spc_morph: spc_morph {
    //         label = "ZB_spc_morph";
    //         compatible = "zmk,behavior-mod-morph";
    //         #binding-cells = <0>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //         bindings = <&kp SPACE>, <&dot_spc>;
    //     };
    //     
    //     dot_spc: dot_spc {
    //         label = "ZB_dot_spc";
    //         compatible = "zmk,behavior-macro";
    //         #binding-cells = <0>;
    //         wait-ms = <0>;
    //         tap-ms = <5>;
    //         bindings = <&kp DOT &kp SPACE &sk LSHFT>;
    //     };
    // };
    };



    keymap { 
        compatible = "zmk,keymap";
        layer_base { 
            label = "base"; 
            bindings = <
                &kp Q         &kp W        &kp F          &kp P         &kp B           &kp J         &kp L         &kp U         &kp Y         &kp SQT
                &hml LGUI A   &hml LALT R  &hml LSHFT S   &hml LCTRL T  &kp G           &kp M         &hmr RCTRL N  &hmr RSHFT E  &hmr RALT I   &hmr RGUI O
                &kp Z         &kp X        &kp C          &kp D         &kp V           &kp K         &kp H         &kp COMMA     &kp DOT       &kp SLASH
                                                          &sl 1       &kp LSHIFT    &kp SPACE  &sl 2
            >; 
        }; 

        layer_sym {
            label = "sym";
            bindings = <
                &kp GRAVE     &kp DOLLAR    &kp RPAR      &kp RBRC      &kp CARET       &kp TILDE     &kp RBKT      &kp MINUS     &kp ASTERISK  &none
                &hml LGUI ESC &hml LALT KP_PLUS &hml LSHFT LPAR &hml LCTRL LBRC &kp SEMI &kp COLON     &hmr RCTRL LBKT &hmr RSHFT EQUAL  &hmr RALT UNDERSCORE  &hmr RGUI ENTER
                &none           &kp EXCL      &kp POUND     &kp PIPE      &kp AT_SIGN     &key_repeat   &kp AMPS      &kp PERCENT   &kp BSLH      &none
                                              &mo 4      &trans             &trans           &trans
            >; 
        };

        layer_ext {
            label = "ext";
            bindings = <
                &kp LC(Z)     &kp LC(X)     &kp LC(C)     &kp LC(V)     &kp LC(Y)       &kp RC(Y)     &kp RC(V)     &kp RC(C)     &kp RC(X)     &kp RC(Z)
                &sk LGUI      &sk LALT      &sk LSHFT     &sk LCTRL     &caps_word      &kp CAPSLOCK  &mt_home 0   LEFT      &mt LC(END)  DOWN      &mt LC(HOME) UP        &mt_end 0    RIGHT
                &none           &none           &none           &none           &key_repeat     &key_repeat   &mt LC(BSPC) BSPC      &kp PAGE_DOWN &kp PAGE_UP   &mt LC(DEL)  DEL
                                              &trans           &trans             &trans           &trans 
            >; 
        };

        layer_num {
                label = "num";
            bindings = <
                &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6        &kp N7        &kp N8        &kp N9        &kp N0
                &trans           &trans           &trans           &trans           &trans             &trans           &trans           &trans           &trans           &trans
                &trans           &trans           &trans           &trans           &trans             &trans           &trans           &trans           &trans           &trans
                                              &trans           &trans             &trans           &trans
            >; 
        };

        layer_func {
            label = "func";
            bindings = <
                &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6         &kp F7       &kp F8        &kp F9        &kp F10
                &trans           &trans           &trans           &trans           &kp F11         &kp F12       &trans           &trans           &trans           &trans
                &trans           &trans           &trans           &trans           &trans             &trans           &trans           &trans           &trans           &trans
                                              &trans           &trans             &trans           &trans
            >; 
        };

        layer_set {
            label = "set";
            bindings = <
                &none           &none          &kp C_VOLUME_UP &kp C_MUTE        &kp C_VOLUME_DOWN   &kp C_VOL_DN   &kp C_MUTE       &kp C_VOLUME_UP  &none         &none
                &none           &none          &kp C_NEXT      &kp C_PLAY_PAUSE  &kp C_PREV          &kp C_PREVIOUS &kp C_PLAY_PAUSE &kp C_NEXT       &none         &none
                &kp C_SLEEP  &kp K_SCREENSAVER  &none        &out OUT_TOG      &ext_power EP_TOG   &bt BT_SEL 0   &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_CLR
                                              &trans           &trans                       &trans           &trans
            >; 
        };

        layer_gam {
            label = "gam";
            bindings = <
                &kp TAB       &kp Q         &kp X         &kp E         &kp R            &trans           &trans           &trans           &trans           &trans
                &kp LSHFT     &kp A         &kp W         &kp D         &kp F            &trans           &trans           &trans           &trans           &trans
                &kp LCTRL     &kp Z         &kp S         &kp X         &kp C            &trans           &trans           &trans           &trans           &trans
                                              &mo 7   &kp SPACE        &trans           &trans
            >; 
        };

        layer_gam_sym {
            label = "gam_sym";
            bindings = <
                &kp N1        &kp N2        &kp N3        &kp N4        &kp N5           &trans           &trans           &trans           &trans           &trans
                &kp CAPS      &trans           &trans           &trans           &kp G            &trans           &trans           &trans           &trans           &trans
                &kp LEFT_ALT  &kp T         &trans           &kp V         &kp B            &trans           &trans           &trans           &trans           &trans
                                              &trans           &trans              &trans           &to 0
            >; 
        };
    }; 
};
