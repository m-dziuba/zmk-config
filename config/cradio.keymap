/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/ {
    combos {
        compatible = "zmk,combos";

        l_tog_settings_layer {
            timeout-ms = <300>;
            key-positions = <30 31>;
            bindings = <&mo 4>;
        };

        tog_gaming_layer {
            bindings = <&tog 5>;
            key-positions = <30 31 32 33>;
        };

        r_tog_settings_layer {
            bindings = <&mo 4>;
            key-positions = <32 33>;
            timeout-ms = <300>;
        };
    };

    behaviors {
        hm_r: hm_r {
            label = "Home row mode right";

            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <5 6 7 8 15 16 17 18 25 26 27 28 32 33 7 8 9 17 18 19 27 28 29 30 31>;
            hold-trigger-on-release;

        };

        hm_l: hm_l {
            label = "Home row mode left";

            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <5 6 7 8 15 16 17 18 25 26 27 28 32 33 7 8 9 17 18 19 27 28 29 30 31>;
            // hold-trigger-on-release;
        };

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            // hold-trigger-on-release;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
&kp Q             &kp W        &kp F          &kp P         &kp B          &kp J      &kp L         &kp U          &kp Y        &kp SQT
&hm_l LMETA A  &hm_l LALT R  &hm_shift_l LSHIFT S  &hm_l LCTRL T  &kp G          &kp M      &hm_r RCTRL N  &hm_shift_r RSHIFT E  &hm_r RALT I  &hm_r RMETA O
&kp Z             &kp X        &kp C          &kp D         &kp B          &kp K      &kp H         &kp COMMA      &kp DOT      &kp SLASH
                                              &sl 2         &kp BACKSPACE  &kp SPACE  &sl 1
            >;
        };

        // Numbers and high frequency symbols

        sym_layer {
            bindings = <
&kp EXCLAMATION  &kp AT      &kp HASH       &kp DOLLAR  &kp PERCENT    &kp KP_EQUAL  &gresc                 &kp COLON        &kp SEMICOLON      &kp PLUS
&kp LMETA        &kp LALT    &kp LSHIFT     &kp LCTRL   &kp CARET      &kp ASTERISK  &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp KP_MINUS
&key_repeat      &caps_word  &kp BACKSLASH  &kp PIPE    &kp AMPERSAND  &kp TILDE     &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp UNDERSCORE
                                            &mo 3       &trans         &trans        &trans
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            bindings = <
&kp ESC   &none     &none       &none      &none       &kp K_REDO    &kp K_PASTE  &kp K_COPY     &kp K_CUT    &kp K_UNDO
&sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &none       &kp CAPSLOCK  &kp LEFT     &kp DOWN       &kp UP       &kp RIGHT
&none     &none     &none       &none      &none       &kp INSERT    &kp HOME     &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                                &trans     &kp DELETE  &kp TAB       &mo 3
            >;
        };

        // Function keys with modifiers

        num_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&sk LMETA     &sk LALT      &sk LSHIFT    &sk LCTRL     &kp F11       &kp F12       &sk RCTRL     &sk RSHFT     &sk RALT      &kp RMETA
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
                                          &trans        &trans        &kp SPACE     &none
            >;
        };

        // Low frequency symbols.
        // Used to type regional accents.
        // Used to change the keyboard's settings.

        settings_layer {
            bindings = <
&kp C_SLEEP  &none  &none  &none   &bootloader  &bootloader        &none         &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE
&kp K_LOCK   &none  &none  &none   &none        &ext_power EP_TOG  &kp C_REWIND  &kp K_STOP         &kp C_PLAY_PAUSE  &kp C_FAST_FORWARD
&none        &none  &none  &none   &none        &out OUT_TOG       &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 3      &bt BT_SEL 4
                           &trans  &trans       &trans             &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp N1     &kp N2  &kp N3  &kp N4   &kp N5     &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp A   &kp W   &kp D    &kp F      &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp Z   &kp S   &kp X    &kp C      &trans  &trans  &trans  &trans  &trans
                           &kp RET  &kp SPACE  &trans  &trans
            >;
        };
    };
};
